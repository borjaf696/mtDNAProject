}else{
data_tmp <- data_filtered}
dfs <- seq(2, 10, by = 2)
#windows()
par(mfrow=c(1,2))
for (df in dfs)
{
splines_adjust(data_tmp, 'Log.GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a,' Alpha(IC): ',0.05), columnay = 'Log(Apariciones +1)')
splines_adjust(data_tmp, 'GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a,' Alpha(IC): ',0.05), columnay = 'Apariciones')
}
}
splines_adjust<-function(DataSub,columna_y, columna_x, df,m,alpha,B,mainT,columnay = 'Apariciones', type = 'regular') {
x_l <- DataSub[,columna_x]
y_l <- DataSub[,columna_y]
if (type == 'b' || type == 'p'){
ind_x <- sort(x_l, index.return = T)$ix
x_l <- x_l[ind_x]
y_l <- y_l[ind_x]
}
# Fit spline to data, with cross-validation to pick lambda
if (type == 'regular'){
spl<-smooth.spline(x=x_l,y=y_l,df=df)
}
if (type == 'b')
{
nodos <- seq(min(x_l), max(x_l), by = m)
x_diseno <- bs(x = x_l, knots = nodos)
spl <- lm(y_l~x_diseno)
}
if (type == 'p')
{
spl <- gam(y_l ~ s(x_l, k=df, bs = "cr"))
#gam.check(spl)
}
Grid <- seq(from=min(x_l),to=max(x_l),length.out=m)
if (type == 'regular'){
Main<-predict(spl,x=Grid)$y
Estim<-matrix(nrow=m,ncol=B)}
if (type == 'b' || type == 'p'){
Grid <- x_l
Main<-predict(spl)
Estim <- matrix(nrow = dim(DataSub)[1], ncol = B)}
for (i in 1:B) {
DataRes<-DataSub[sample(dim(DataSub)[1],replace=TRUE),c(columna_x,columna_y)]
x_loc <- DataRes[,columna_x]
y_loc <- DataRes[,columna_y]
if (type == 'b' || type == 'p')
{
ind_x <- sort(x_loc, index.return = T)$ix
x_loc <- x_loc[ind_x]
y_loc <- y_loc[ind_x]
}
# Fit spline to data, with cross-validation to pick lambda
if (type == 'regular')
spl <- smooth.spline(x=x_loc,y=y_loc,df=df)
if (type == 'b'){
nodos <- seq(min(x_loc), max(x_loc), by = m)
x_loc_diseno <- bs(x = x_loc, knots = nodos)
spl <- lm(y_loc~x_diseno)
}
if (type == 'p')
{
spl <- gam(y_loc ~ s(x_loc, k=df, bs = "cr"))
}
if (type == 'regular'){
Grid <- seq(from=min(x_loc),to=max(x_loc),length.out=m)
Estim[,i]<-predict(spl,x=Grid)$y}
if (type == 'b' || type == 'p'){
Estim[,i]<-predict(spl)}
}
Lower<-2*Main-apply(Estim,1,quantile,probs=1-alpha/2)
Upper<-2*Main-apply(Estim,1,quantile,probs=alpha/2)
plot(x_l,y_l,pch=16,col="blue",ylim=c(0,6),xlab="CvIndex",ylab=columnay,
main=mainT)
lines(Grid,Main,col="red",lwd=2)
lines(Grid,Lower,col="red",lty=2)
lines(Grid,Upper,col="red",lty=2)
plot(Grid,Main,col="red",type="l",lwd=2,ylim = c(0,max(Upper)),xlab="CvIndex",ylab=columnay)
lines(Grid,Lower,col="red",lty=2)
lines(Grid,Upper,col="red",lty=2)
return(spl)}
splines_adjust(data_tmp, 'Log.GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Log(Apariciones +1)')
par(mfrow=c(1,2))
splines_adjust(data_tmp, 'Log.GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Log(Apariciones +1)')
splines_adjust(data_tmp, 'GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Apariciones')
a <- 0
lower_bound <- quantile(y, 0.00);lower_bound
upper_bound <- quantile(y, 1 - a);upper_bound
outlier_ind <- which(y < lower_bound | y > upper_bound)
if (!is.na(outlier_ind[1])){
data_tmp <- data_filtered[-outlier_ind,]
}else{
data_tmp <- data_filtered}
splines_adjust(data_tmp, 'Log.GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Log(Apariciones +1)')
splines_adjust(data_tmp, 'GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Apariciones')
data_tmp$GB.Seqs
splines_adjust<-function(DataSub,columna_y, columna_x, df,m,alpha,B,mainT,columnay = 'Apariciones', type = 'regular') {
x_l <- DataSub[,columna_x]
y_l <- DataSub[,columna_y]
if (type == 'b' || type == 'p'){
ind_x <- sort(x_l, index.return = T)$ix
x_l <- x_l[ind_x]
y_l <- y_l[ind_x]
}
# Fit spline to data, with cross-validation to pick lambda
if (type == 'regular'){
spl<-smooth.spline(x=x_l,y=y_l,df=df)
}
if (type == 'b')
{
nodos <- seq(min(x_l), max(x_l), by = m)
x_diseno <- bs(x = x_l, knots = nodos)
spl <- lm(y_l~x_diseno)
}
if (type == 'p')
{
spl <- gam(y_l ~ s(x_l, k=df, bs = "cr"))
#gam.check(spl)
}
Grid <- seq(from=min(x_l),to=max(x_l),length.out=m)
if (type == 'regular'){
Main<-predict(spl,x=Grid)$y
Estim<-matrix(nrow=m,ncol=B)}
if (type == 'b' || type == 'p'){
Grid <- x_l
Main<-predict(spl)
Estim <- matrix(nrow = dim(DataSub)[1], ncol = B)}
for (i in 1:B) {
DataRes<-DataSub[sample(dim(DataSub)[1],replace=TRUE),c(columna_x,columna_y)]
x_loc <- DataRes[,columna_x]
y_loc <- DataRes[,columna_y]
if (type == 'b' || type == 'p')
{
ind_x <- sort(x_loc, index.return = T)$ix
x_loc <- x_loc[ind_x]
y_loc <- y_loc[ind_x]
}
# Fit spline to data, with cross-validation to pick lambda
if (type == 'regular')
spl <- smooth.spline(x=x_loc,y=y_loc,df=df)
if (type == 'b'){
nodos <- seq(min(x_loc), max(x_loc), by = m)
x_loc_diseno <- bs(x = x_loc, knots = nodos)
spl <- lm(y_loc~x_diseno)
}
if (type == 'p')
{
spl <- gam(y_loc ~ s(x_loc, k=df, bs = "cr"))
}
if (type == 'regular'){
Grid <- seq(from=min(x_loc),to=max(x_loc),length.out=m)
Estim[,i]<-predict(spl,x=Grid)$y}
if (type == 'b' || type == 'p'){
Estim[,i]<-predict(spl)}
}
Lower<-2*Main-apply(Estim,1,quantile,probs=1-alpha/2)
Upper<-2*Main-apply(Estim,1,quantile,probs=alpha/2)
plot(x_l,y_l,pch=16,col="blue",ylim=c(0,max(y_l)),xlab="CvIndex",ylab=columnay,
main=mainT)
lines(Grid,Main,col="red",lwd=2)
lines(Grid,Lower,col="red",lty=2)
lines(Grid,Upper,col="red",lty=2)
plot(Grid,Main,col="red",type="l",lwd=2,ylim = c(0,max(Upper)),xlab="CvIndex",ylab=columnay)
lines(Grid,Lower,col="red",lty=2)
lines(Grid,Upper,col="red",lty=2)
return(spl)}
splines_adjust<-function(DataSub,columna_y, columna_x, df,m,alpha,B,mainT,columnay = 'Apariciones', type = 'regular') {
x_l <- DataSub[,columna_x]
y_l <- DataSub[,columna_y]
if (type == 'b' || type == 'p'){
ind_x <- sort(x_l, index.return = T)$ix
x_l <- x_l[ind_x]
y_l <- y_l[ind_x]
}
# Fit spline to data, with cross-validation to pick lambda
if (type == 'regular'){
spl<-smooth.spline(x=x_l,y=y_l,df=df)
}
if (type == 'b')
{
nodos <- seq(min(x_l), max(x_l), by = m)
x_diseno <- bs(x = x_l, knots = nodos)
spl <- lm(y_l~x_diseno)
}
if (type == 'p')
{
spl <- gam(y_l ~ s(x_l, k=df, bs = "cr"))
#gam.check(spl)
}
Grid <- seq(from=min(x_l),to=max(x_l),length.out=m)
if (type == 'regular'){
Main<-predict(spl,x=Grid)$y
Estim<-matrix(nrow=m,ncol=B)}
if (type == 'b' || type == 'p'){
Grid <- x_l
Main<-predict(spl)
Estim <- matrix(nrow = dim(DataSub)[1], ncol = B)}
for (i in 1:B) {
DataRes<-DataSub[sample(dim(DataSub)[1],replace=TRUE),c(columna_x,columna_y)]
x_loc <- DataRes[,columna_x]
y_loc <- DataRes[,columna_y]
if (type == 'b' || type == 'p')
{
ind_x <- sort(x_loc, index.return = T)$ix
x_loc <- x_loc[ind_x]
y_loc <- y_loc[ind_x]
}
# Fit spline to data, with cross-validation to pick lambda
if (type == 'regular')
spl <- smooth.spline(x=x_loc,y=y_loc,df=df)
if (type == 'b'){
nodos <- seq(min(x_loc), max(x_loc), by = m)
x_loc_diseno <- bs(x = x_loc, knots = nodos)
spl <- lm(y_loc~x_diseno)
}
if (type == 'p')
{
spl <- gam(y_loc ~ s(x_loc, k=df, bs = "cr"))
}
if (type == 'regular'){
Grid <- seq(from=min(x_loc),to=max(x_loc),length.out=m)
Estim[,i]<-predict(spl,x=Grid)$y}
if (type == 'b' || type == 'p'){
Estim[,i]<-predict(spl)}
}
Lower<-2*Main-apply(Estim,1,quantile,probs=1-alpha/2)
Upper<-2*Main-apply(Estim,1,quantile,probs=alpha/2)
plot(x_l,y_l,pch=16,col="blue",ylim=c(min(y_l),max(y_l)),xlab="CvIndex",ylab=columnay,
main=mainT)
lines(Grid,Main,col="red",lwd=2)
lines(Grid,Lower,col="red",lty=2)
lines(Grid,Upper,col="red",lty=2)
plot(Grid,Main,col="red",type="l",lwd=2,ylim = c(min(lower),max(Upper)),xlab="CvIndex",ylab=columnay)
lines(Grid,Lower,col="red",lty=2)
lines(Grid,Upper,col="red",lty=2)
return(spl)}
par(mar=c(1,1,1,1))
## Modelos no paramÃ©tricos:
#### Splines.
l_a <- c(0.0, 0.01, 0.05)
for (a in l_a)
{
# Eliminamos datos fuera de lugar
lower_bound <- quantile(y, 0.00);lower_bound
upper_bound <- quantile(y, 1 - a);upper_bound
outlier_ind <- which(y < lower_bound | y > upper_bound)
if (!is.na(outlier_ind[1])){
data_tmp <- data_filtered[-outlier_ind,]
}else{
data_tmp <- data_filtered}
dfs <- seq(2, 10, by = 2)
#windows()
par(mfrow=c(1,2))
for (df in dfs)
{
splines_adjust(data_tmp, 'Log.GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Log(Apariciones +1)')
splines_adjust(data_tmp, 'GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Apariciones')
}
}
splines_adjust<-function(DataSub,columna_y, columna_x, df,m,alpha,B,mainT,columnay = 'Apariciones', type = 'regular') {
x_l <- DataSub[,columna_x]
y_l <- DataSub[,columna_y]
if (type == 'b' || type == 'p'){
ind_x <- sort(x_l, index.return = T)$ix
x_l <- x_l[ind_x]
y_l <- y_l[ind_x]
}
# Fit spline to data, with cross-validation to pick lambda
if (type == 'regular'){
spl<-smooth.spline(x=x_l,y=y_l,df=df)
}
if (type == 'b')
{
nodos <- seq(min(x_l), max(x_l), by = m)
x_diseno <- bs(x = x_l, knots = nodos)
spl <- lm(y_l~x_diseno)
}
if (type == 'p')
{
spl <- gam(y_l ~ s(x_l, k=df, bs = "cr"))
#gam.check(spl)
}
Grid <- seq(from=min(x_l),to=max(x_l),length.out=m)
if (type == 'regular'){
Main<-predict(spl,x=Grid)$y
Estim<-matrix(nrow=m,ncol=B)}
if (type == 'b' || type == 'p'){
Grid <- x_l
Main<-predict(spl)
Estim <- matrix(nrow = dim(DataSub)[1], ncol = B)}
for (i in 1:B) {
DataRes<-DataSub[sample(dim(DataSub)[1],replace=TRUE),c(columna_x,columna_y)]
x_loc <- DataRes[,columna_x]
y_loc <- DataRes[,columna_y]
if (type == 'b' || type == 'p')
{
ind_x <- sort(x_loc, index.return = T)$ix
x_loc <- x_loc[ind_x]
y_loc <- y_loc[ind_x]
}
# Fit spline to data, with cross-validation to pick lambda
if (type == 'regular')
spl <- smooth.spline(x=x_loc,y=y_loc,df=df)
if (type == 'b'){
nodos <- seq(min(x_loc), max(x_loc), by = m)
x_loc_diseno <- bs(x = x_loc, knots = nodos)
spl <- lm(y_loc~x_diseno)
}
if (type == 'p')
{
spl <- gam(y_loc ~ s(x_loc, k=df, bs = "cr"))
}
if (type == 'regular'){
Grid <- seq(from=min(x_loc),to=max(x_loc),length.out=m)
Estim[,i]<-predict(spl,x=Grid)$y}
if (type == 'b' || type == 'p'){
Estim[,i]<-predict(spl)}
}
Lower<-2*Main-apply(Estim,1,quantile,probs=1-alpha/2)
Upper<-2*Main-apply(Estim,1,quantile,probs=alpha/2)
plot(x_l,y_l,pch=16,col="blue",ylim=c(min(y_l),max(y_l)),xlab="CvIndex",ylab=columnay,
main=mainT)
lines(Grid,Main,col="red",lwd=2)
lines(Grid,Lower,col="red",lty=2)
lines(Grid,Upper,col="red",lty=2)
plot(Grid,Main,col="red",type="l",lwd=2,ylim = c(min(Lower),max(Upper)),xlab="CvIndex",ylab=columnay)
lines(Grid,Lower,col="red",lty=2)
lines(Grid,Upper,col="red",lty=2)
return(spl)}
par(mar=c(1,1,1,1))
## Modelos no paramÃ©tricos:
#### Splines.
l_a <- c(0.0, 0.01, 0.05)
for (a in l_a)
{
# Eliminamos datos fuera de lugar
lower_bound <- quantile(y, 0.00);lower_bound
upper_bound <- quantile(y, 1 - a);upper_bound
outlier_ind <- which(y < lower_bound | y > upper_bound)
if (!is.na(outlier_ind[1])){
data_tmp <- data_filtered[-outlier_ind,]
}else{
data_tmp <- data_filtered}
dfs <- seq(2, 10, by = 2)
#windows()
par(mfrow=c(1,2))
for (df in dfs)
{
splines_adjust(data_tmp, 'Log.GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Log(Apariciones +1)')
splines_adjust(data_tmp, 'GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Apariciones')
}
}
l_a <- c(0.0, 0.01, 0.05)
for (a in l_a)
{
# Eliminamos datos fuera de lugar
lower_bound <- quantile(y, 0.00);lower_bound
upper_bound <- quantile(y, 1 - a);upper_bound
outlier_ind <- which(y < lower_bound | y > upper_bound)
if (!is.na(outlier_ind[1])){
data_tmp <- data_filtered[-outlier_ind,]
}else{
data_tmp <- data_filtered}
dfs <- seq(2, 10, by = 2)
#windows()
par(mfrow=c(1,2))
for (df in dfs)
{
splines_adjust(data_tmp, 'Log.GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Log(Apariciones +1)')
splines_adjust(data_tmp, 'GB.Seqs', 'CVTOT', df,300,0.025,1000,paste("Smoothing Spline Regression ",df,'(dfs) Filtro = ',a), columnay = 'Apariciones')
}
}
breaks <- seq(-1, 2, by = 0.25)
# Histogramas
log.apariciones <- numeric(length(breaks)-1)
log.apariciones.norm <- numeric(length(breaks)-1)
apariciones <- numeric(length(breaks) - 1)
apariciones.norm <- numeric(length(breaks)-1)
count.apariciones <- numeric(length(breaks) - 1)
count.apariciones.norm <- numeric(length(breaks) - 1)
for (i in seq(length(breaks)-1))
{
log.apariciones[i] <- sum(data_filtered$Log.GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])
log.apariciones.norm[i] <- sum(data_filtered$Log.GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])
apariciones[i] <- sum(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])
apariciones.norm[i] <- sum(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])
count.apariciones[i] <- length(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1] & data_filtered$GB.Seqs > 0])
count.apariciones.norm[i] <- length(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1] & data_filtered$GB.Seqs > 0])
}
par(mfrow = c(2,3))
barplot(apariciones, names = breaks[1:length(breaks)-1], ylab = 'Total Variaciones Registradas', xlab = 'CVIndex', col = "#69b3a2")
barplot(log.apariciones, names =  breaks[1:length(breaks)-1], ylab = 'Total Log(Variaciones Registradas)', xlab = 'CVIndex', col = "#69b3a2")
barplot(count.apariciones, names =  breaks[1:length(breaks)-1], ylab = 'Number of CVIndex variations', xlab = 'CVIndex', col = "#69b3a2")
barplot(apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = 'Total Variaciones Registradas en frecuencia', xlab = 'CVIndex', col = "#69b3a2")
barplot(log.apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = 'Total Log(Variaciones Registradas) en frecuencia', xlab = 'CVIndex', col = "#69b3a2")
barplot(count.apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = 'Number of CVIndex variations en frecuencia', xlab = 'CVIndex', col = "#69b3a2")
data_1_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs > 0]
hist(data_1_apar, breaks = 'fd', freq = FALSE, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones > 0)')
data_0_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs == 0]
labels <- c(-1,-0.5,0,0.5,1,1.5,2)
h <- hist(data_0_apar, breaks = 'fd', freq = T, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones = 0)')
barplot(h/total_variantes,names = labels,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
barplot(h/nrows(data_filtered),names = labels,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
barplot(h/nrow(data_filtered),names = labels,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
h
barplot(h$counts/nrow(data_filtered),names = labels,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
labels <- c(-1,-0.5,0,0.5,1,1.5)
h <- hist(data_0_apar, breaks = 'fd', freq = T, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones = 0)')
barplot(h$counts/nrow(data_filtered),names = labels,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
data_1_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs > 0]
h <- hist(data_1_apar, breaks = 'fd', freq = FALSE, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones > 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones > 0)/Total posiciones' )
par(mfrow = c(1,4))
data_0_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs == 0]
labels <- c(-1,-0.5,0,0.5,1,1.5,2)
h <- hist(data_0_apar, breaks = 'fd', freq = T, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones = 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
data_1_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs > 0]
h <- hist(data_1_apar, breaks = 'fd', freq = FALSE, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones > 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones > 0)/Total posiciones' )
par(mfrow = c(2,2))
data_0_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs == 0]
labels <- c(-1,-0.5,0,0.5,1,1.5,2)
h <- hist(data_0_apar, breaks = 'fd', freq = T, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones = 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
data_1_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs > 0]
h <- hist(data_1_apar, breaks = 'fd', freq = FALSE, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones > 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones > 0)/Total posiciones' )
par(mfrow = c(2,2))
data_0_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs == 0]
labels <- c(-1,-0.5,0,0.5,1,1.5,2)
h <- hist(data_0_apar, breaks = 'fd', freq = T, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones = 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
data_1_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs > 0]
h <- hist(data_1_apar, breaks = 'fd', freq = T, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones > 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones > 0)/Total posiciones' )
breaks <- seq(-1, 2, by = 0.25)
# Histogramas
log.apariciones <- numeric(length(breaks)-1)
log.apariciones.norm <- numeric(length(breaks)-1)
apariciones <- numeric(length(breaks) - 1)
apariciones.norm <- numeric(length(breaks)-1)
count.apariciones <- numeric(length(breaks) - 1)
count.apariciones.norm <- numeric(length(breaks) - 1)
for (i in seq(length(breaks)-1))
{
log.apariciones[i] <- sum(data_filtered$Log.GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])
log.apariciones.norm[i] <- sum(data_filtered$Log.GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])/length_data_apar
apariciones[i] <- sum(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])
apariciones.norm[i] <- sum(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])/length_data_apar
count.apariciones[i] <- length(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1] & data_filtered$GB.Seqs > 0])
count.apariciones.norm[i] <- length(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1] & data_filtered$GB.Seqs > 0])/length_data_apar
}
par(mfrow = c(2,3))
barplot(apariciones, names = breaks[1:length(breaks)-1], ylab = 'Total Variaciones Registradas', xlab = 'CVIndex', col = "#69b3a2")
barplot(log.apariciones, names =  breaks[1:length(breaks)-1], ylab = 'Total Log(Variaciones Registradas)', xlab = 'CVIndex', col = "#69b3a2")
barplot(count.apariciones, names =  breaks[1:length(breaks)-1], ylab = 'Number of CVIndex variations', xlab = 'CVIndex', col = "#69b3a2")
barplot(apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = 'Total Variaciones Registradas en frecuencia', xlab = 'CVIndex', col = "#69b3a2")
barplot(log.apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = 'Total Log(Variaciones Registradas) en frecuencia', xlab = 'CVIndex', col = "#69b3a2")
barplot(count.apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = 'Number of CVIndex variations en frecuencia', xlab = 'CVIndex', col = "#69b3a2")
breaks <- seq(-1, 2, by = 0.25)
# Histogramas
log.apariciones <- numeric(length(breaks)-1)
log.apariciones.norm <- numeric(length(breaks)-1)
apariciones <- numeric(length(breaks) - 1)
apariciones.norm <- numeric(length(breaks)-1)
count.apariciones <- numeric(length(breaks) - 1)
count.apariciones.norm <- numeric(length(breaks) - 1)
for (i in seq(length(breaks)-1))
{
log.apariciones[i] <- sum(data_filtered$Log.GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])
log.apariciones.norm[i] <- sum(data_filtered$Log.GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])/length_data_apar
apariciones[i] <- sum(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])
apariciones.norm[i] <- sum(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])/length_data_apar
count.apariciones[i] <- length(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1] & data_filtered$GB.Seqs > 0])
count.apariciones.norm[i] <- length(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1] & data_filtered$GB.Seqs > 0])/length_data_apar
}
par(mfrow = c(2,3))
barplot(apariciones, names = breaks[1:length(breaks)-1], ylab = 'Total Variaciones Registradas', xlab = 'CVIndex', col = "#69b3a2")
barplot(log.apariciones, names =  breaks[1:length(breaks)-1], ylab = 'Total Log(Variaciones Registradas)', xlab = 'CVIndex', col = "#69b3a2")
barplot(count.apariciones, names =  breaks[1:length(breaks)-1], ylab = 'Number of CVIndex variations', xlab = 'CVIndex', col = "#69b3a2")
barplot(apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = 'Total Variaciones Registradas / #Places with variations', xlab = 'CVIndex', col = "#69b3a2")
barplot(log.apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = 'Log(Variaciones Registradas)/ #Places with variations', xlab = 'CVIndex', col = "#69b3a2")
barplot(count.apariciones.norm, names =  breaks[1:length(breaks)-1], ylab = '#CVIndex variations/# Places with variation', xlab = 'CVIndex', col = "#69b3a2")
par(mfrow = c(2,2))
data_0_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs == 0]
labels <- c(-1,-0.5,0,0.5,1,1.5,2)
h <- hist(data_0_apar, breaks = 'fd', freq = T, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones = 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones = 0)/Total posiciones' )
data_1_apar <- data_filtered$CVTOT[data_filtered$GB.Seqs > 0]
h <- hist(data_1_apar, breaks = 'fd', freq = T, xlab = 'CVIndex', main = 'Histograma CVIndex (Apariciones > 0)')
barplot(h$counts/nrow(data_filtered),names = h$mids,main = 'Histograma CVIndex (Apariciones > 0)/Total posiciones' )
breaks <- seq(-1, 2, by = 0.25)
# Histogramas
apariciones.media <- numeric(length(breaks)-1)
log.apariciones.media <- numeric(length(breaks) - 1)
for (i in seq(length(breaks)-1))
{
apariciones.media[i] <- sum(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])/length(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1] & data_filtered$GB.Seqs > 0])
log.apariciones.media[i] <- sum(data_filtered$Log.GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1]])/length(data_filtered$GB.Seqs[data_filtered$CVTOT >= breaks[i] & data_filtered$CVTOT < breaks[i+1] & data_filtered$GB.Seqs > 0])
}
barplot(apariciones.media, names = breaks[1:length(breaks)-1], ylab = 'Media Variaciones Registradas', xlab = 'CVIndex', col = "#69b3a2")
barplot(apariciones.media, names = breaks[1:length(breaks)-1], ylab = 'Media Log Variaciones por intervalo', xlab = 'CVIndex', col = "#69b3a2")
par(mfrow=c(1,2))
par(mfrow=c(1,2))
barplot(apariciones.media, names = breaks[1:length(breaks)-1], ylab = 'Media Variaciones Registradas', xlab = 'CVIndex', col = "#69b3a2")
barplot(apariciones.media, names = breaks[1:length(breaks)-1], ylab = 'Media Log Variaciones por intervalo', xlab = 'CVIndex', col = "#69b3a2")
par(mfrow=c(1,2))
barplot(apariciones.media, names = breaks[1:length(breaks)-1], ylab = 'Media Variaciones Registradas', xlab = 'CVIndex', col = "#69b3a2")
barplot(log.apariciones.media, names = breaks[1:length(breaks)-1], ylab = 'Media Log Variaciones por intervalo', xlab = 'CVIndex', col = "#69b3a2")
?gamlss
